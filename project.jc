import jandcode.utils.UtString
import jandcode.utils.UtFile

def showout = false

product = cm("Сборка") {
    ut.runexe(showout: showout, err: false, cmd: "cmd /C rmdir _product /S /Q")
    ut.runexe(showout: showout, err: false, cmd: "cmd /C mkdir _product")

    // Собираем файлы
    ut.runexe(showout: showout, cmd: "cmd /C copy        README.md                 _product\\README.md")
    ut.runexe(showout: showout, cmd: "cmd /C xcopy /E /I php\\site                 _product\\site")
    ut.runexe(showout: showout, cmd: "cmd /C xcopy /E /I php\\api.04               _product\\api.04")
    ut.runexe(showout: showout, cmd: "cmd /C copy        install\\content_root.php _product\\api.04\\content_root.php")

    // Формируем файлы
    ut.runexe(showout: showout, err: false, cmd: "cmd /C mkdir      _product\\_data_root")
    ut.runexe(showout: showout, err: false, cmd: "cmd /C type nul > _product\\site\\web_pass\\pass_md5.txt")


    // Упаковка                                                         
    ut.runexe(showout: showout, cmd: "pkzip -add -recurse -path product.zip site/* api.04/* _data_root", dir: "_product")
}

// заполнение базы данных из csv
do_fill_db = {String csv_dir_name, String database ->
    println("  БД: " + database + ", CSV: " + csv_dir_name);
    try {
        ut.runexe(showout: showout, cmd: "prepare_db.exe -cmd snapshotToDatabase -csv_dir_name " + csv_dir_name + " -database " + database);
    } catch (Exception e) {
        ut.runexe(cmd: "cmd /C type prepare_db.exe.err");
        println("  БД: " + database + ", CSV: " + csv_dir_name);
        throw e;
    }
}

do_prepare_all_db = {->
    out_separator("Подготовка и заполнение эталонной базы данных", "-")

    //
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del install\\db_work.gdb")
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del install\\db_work-ru.gdb")
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del install\\db_work-kz.gdb")
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del install\\db_work-tg.gdb")
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del install\\db_demo-ru.gdb")
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del install\\db_demo-kz.gdb")
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del install\\db_demo-tg.gdb")
    //
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del install\\db_work-com.gdb")
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del install\\db_demo-com.gdb")
    //
    ut.runexe(showout: showout, cmd: "pkzip -extract db_work.174.gdb.zip", dir: "install")
    

    //
    do_prepare_db("install\\db_work.gdb", false);
    do_fill_db("install\\snapshot.work.173", "install\\db_work.gdb");


    //
    out_separator("Подготовка и заполнение рабочих баз данных", "-")
    //
    ut.runexe(showout: showout, cmd: "cmd /C copy install\\db_work.gdb install\\db_work-ru.gdb")
    do_fill_db("install\\snapshot.work.ru", "install\\db_work-ru.gdb");
    //
    ut.runexe(showout: showout, cmd: "cmd /C copy install\\db_work.gdb install\\db_work-kz.gdb")
    do_fill_db("install\\snapshot.work.kz", "install\\db_work-kz.gdb");
    //
    ut.runexe(showout: showout, cmd: "cmd /C copy install\\db_work.gdb install\\db_work-tg.gdb")
    do_fill_db("install\\snapshot.work.tg", "install\\db_work-tg.gdb");

    //
    ut.runexe(showout: showout, cmd: "cmd /C copy install\\db_work.gdb install\\db_work-comm.gdb")
    do_fill_db("install\\snapshot.work.kz", "install\\db_work-comm.gdb");
    do_fill_db("install\\snapshot.work.comm", "install\\db_work-comm.gdb");

    
    //
    out_separator("Подготовка и заполнение учебных баз данных", "-")
    String database
    //
    database = "install\\db_demo-ru.gdb"
    ut.runexe(showout: showout, cmd: "cmd /C copy install\\db_work-ru.gdb " + database)
    do_fill_db("install\\snapshot.demo", database);
    do_fill_db("install\\snapshot.demo.ru", database);
    ut.runexe(showout: showout, cmd: "prepare_db.exe -cmd set_last_date -date 20.04.2020 -database " + database);
    //
    database = "install\\db_demo-kz.gdb"
    ut.runexe(showout: showout, cmd: "cmd /C copy install\\db_work-kz.gdb " + database)
    do_fill_db("install\\snapshot.demo", database);
    do_fill_db("install\\snapshot.demo.kz", database);
    ut.runexe(showout: showout, cmd: "prepare_db.exe -cmd set_last_date -date 20.04.2020 -database " + database);
    //
    database = "install\\db_demo-tg.gdb"
    ut.runexe(showout: showout, cmd: "cmd /C copy install\\db_work-tg.gdb " + database)
    do_fill_db("install\\snapshot.demo", database);
    do_fill_db("install\\snapshot.demo.tg", database);
    ut.runexe(showout: showout, cmd: "prepare_db.exe -cmd set_last_date -date 20.04.2020 -database " + database);

    //
    database = "install\\db_demo-comm.gdb"
    ut.runexe(showout: showout, cmd: "cmd /C copy install\\db_work-comm.gdb " + database)
    do_fill_db("install\\snapshot.demo", database);
    do_fill_db("install\\snapshot.demo.kz", database);
    do_fill_db("install\\snapshot.demo.comm", database);
    ut.runexe(showout: showout, cmd: "prepare_db.exe -cmd set_last_date -date 20.04.2020 -database " + database);


    //
    out_separator("Постобработка баз данных: сотрем GUID, поставим метку демо/не демо", "-")
    do_prepare_db("install\\db_work-ru.gdb", false);
    do_prepare_db("install\\db_work-kz.gdb", false);
    do_prepare_db("install\\db_work-tg.gdb", false);
    do_prepare_db("install\\db_demo-ru.gdb", true);
    do_prepare_db("install\\db_demo-kz.gdb", true);
    do_prepare_db("install\\db_demo-tg.gdb", true);
    //
    do_prepare_db("install\\db_work-comm.gdb", false);
    do_prepare_db("install\\db_demo-comm.gdb", true);
}

move_to_install = {->
    ut.runexe(showout: showout, err: false, cmd: "cmd /C move /Y Install\\PawnShop*.exe D:\\JadatexPawnInstall\\")
}

createdb = {->
    ut.runexe(showout: showout, dir: "db_ib", cmd: "cmd /C DoCreate_db.bat z:\\PawnShop\\DB.GDB")
}

do_compile_demo = {Boolean is_commission ->
    out_separator("Компиляция демо", "-")

    // почистим старое
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del Pawn.product.exe")
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del Pawn.product.map")
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del Pawn_demo.exe")
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del Pawn_demo.map")

    // Скопируем только файл проекта
    ut.runexe(showout: showout, err: true,  cmd: "cmd /C python do_convert_dpr.py ..\\src ..\\_src.product", dir: "Z:\\PawnShop\\py")

    // скомпиляем преобразованные исходники (с добавленными метками)
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del /s *.dcu", dir: "Z:\\ksLib")
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del /s *.dcu")
    //
    if (is_commission) {
      ut.runexe(showout: showout, err: true, cmd: "dcc32 -DIB;LOGSQL_ERROR;RELIS;DEMO;COMMISSION"+COMPILE_KEY+" Pawn.product.dpr /b")
    } else {
      ut.runexe(showout: showout, err: true, cmd: "dcc32 -DIB;LOGSQL_ERROR;RELIS;DEMO"+COMPILE_KEY+" Pawn.product.dpr /b")
    }
    //
    ut.runexe(showout: showout, cmd: "cmd /C move Pawn.product.exe Pawn_demo.exe")
    ut.runexe(showout: showout, cmd: "cmd /C move Pawn.product.map Pawn_demo.map")
    //
    println("");
}


do_compile = {Boolean is_commission ->
    out_separator("Компиляция не демо", "-")

    // почистим старые преобразованные исходники
    ut.runexe(showout: showout, err: false, cmd: "cmd /C rmdir _src.product /S /Q")
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del Pawn.product.exe")
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del Pawn.product.map")
    // почистим прочее
    ut.runexe(showout: showout, err: false, cmd: "cmd /C rmdir _exe_crypt /S /Q")
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del Pawn.exe")
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del Pawn.map")
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del _src.product.rtk")
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del _src.product.s1_crypt")

    // создадим преобразованные исходники (с добавленными метками)
    ut.runexe(showout: showout, err: true,  cmd: "cmd /C python do_convert.py ..\\src ..\\_src.product", dir: "Z:\\PawnShop\\py")

    // получим s1_crypt (по добавленным меткам)
    ut.runexe(showout: showout, err: true,  cmd: "cmd /C Z:\\PawnShopKeyGen\\Key.exe -cmd s1_crypt -msk_file _src.product")

    // скомпиляем преобразованные исходники (с добавленными метками)
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del /s *.dcu", dir: "Z:\\ksLib")
    ut.runexe(showout: showout, err: false, cmd: "cmd /C del /s *.dcu")
    //
    //
    if (is_commission) {
      ut.runexe(showout: showout, err: true, cmd: "dcc32 -DIB;LOGSQL_ERROR;RELIS;NOTDEMO;COMMISSION"+COMPILE_KEY+" Pawn.product.dpr /b")
    } else {
      ut.runexe(showout: showout, err: true, cmd: "dcc32 -DIB;LOGSQL_ERROR;RELIS;NOTDEMO"+COMPILE_KEY+" Pawn.product.dpr /b")
    }
    //
    ut.runexe(showout: showout, cmd: "cmd /C move Pawn.product.exe Pawn.exe")
    ut.runexe(showout: showout, cmd: "cmd /C move Pawn.product.map Pawn.map")

    // шифруем скомпилированный Pawn.exe, блоки по меткам 
    ut.runexe(showout: showout, err: true, cmd: "cmd /C Z:\\PawnShopKeyGen\\ExeCrypt.exe -exe Pawn.exe -keys _src.product")

    //
    ut.runexe(showout: showout, err: true,  cmd: "cmd /C copy _src.product.s1_crypt Pawn.exe.s1_crypt")

    // почистим преобразованные исходники
    ut.runexe(showout: showout, cmd: "cmd /C rmdir _exe_crypt /S /Q")
    ut.runexe(showout: showout, cmd: "cmd /C rmdir _src.product /S /Q")
    //
    ut.runexe(showout: showout, cmd: "cmd /C del Pawn.product.dpr")
    ut.runexe(showout: showout, cmd: "cmd /C del Pawn.product.res")
    ut.runexe(showout: showout, cmd: "cmd /C del Pawn.product.cfg")
    ut.runexe(showout: showout, cmd: "cmd /C del Pawn.product.dof")
    ut.runexe(showout: showout, cmd: "cmd /C del Pawn.product.dsk")
    //
    //ut.runexe(showout: showout, cmd: "cmd /C del Pawn.exe.s1_crypt")
    //
    println("");
}


// 
do_inno = { String lang, String langName, boolean fullInstall, installJc, installJre, is_commission ->
    out_separator("Сборка дистрибутива", "-")
    println("  Язык.................... " + langName + " (" + lang + ")");
    println("  Полный дистрибутив...... " + fullInstall);
    println("    jandcode.............. " + installJc);
    println("    jre................... " + installJre);

    ut.runexe(showout: showout, cmd: "dps ver -w")
    ut.runexe(showout: showout, cmd: "cmd /C copy install\\install_app.iss install\\temp7.iss")


    // Скупка или ломбард?
    if (is_commission) {
        // Скупка
        ut.runexe(showout: showout, cmd: "tfu replstr -i install\\temp7.iss -o install\\temp6.iss -s0 _CFG_APP_NAME -r0 \"Jadatex Скупка. Комиссионный магазин\" -u")
        ut.runexe(showout: showout, cmd: "tfu replstr -i install\\temp6.iss -o install\\temp5.iss -s0 _CFG_APP_TYPE -r0 Comm -u")
        // Язык
        ut.runexe(showout: showout, cmd: "tfu replstr -i install\\temp5.iss -o install\\temp4.iss -s0 _CFG_LANG_NAME -r0 \"\" -s1 _CFG_LANG -r1 \"\" -u")
    } else {
        // Ломбард
        ut.runexe(showout: showout, cmd: "tfu replstr -i install\\temp7.iss -o install\\temp6.iss -s0 _CFG_APP_NAME -r0 \"Jadatex Ломбард. Управление ломбардом\" -u")
        ut.runexe(showout: showout, cmd: "tfu replstr -i install\\temp6.iss -o install\\temp5.iss -s0 _CFG_APP_TYPE -r0 \"\" -u")
        // Язык
        ut.runexe(showout: showout, cmd: "tfu replstr -i install\\temp5.iss -o install\\temp4.iss -s0 _CFG_LANG_NAME -r0 \"$langName\" -s1 _CFG_LANG -r1 $lang -u")
    }


    // номер версии
    ut.runexe(showout: showout, cmd: "tfu replstrf -i install\\temp4.iss -o install\\temp3.iss -s0 _CFG_APP_VERSION  -r version -u")

    //
    if (fullInstall) {
        // дистрибутив полный
        ut.runexe(showout: showout, cmd: "tfu replstr  -i install\\temp3.iss -o install\\temp2.iss -s0 _CFG_FULL_INSTALL -r0 fullInstall -u")
    } else {
        // дистрибутив - обновление
        ut.runexe(showout: showout, cmd: "tfu replstr  -i install\\temp3.iss -o install\\temp2.iss -s0 _CFG_FULL_INSTALL -r0 noFullInstall -u")
    }

    //
    if (installJc) {
        // с дистрибутивом jandcode
        ut.runexe(showout: showout, cmd: "tfu replstr  -i install\\temp2.iss -o install\\temp1.iss -s0 _CFG_INSTALL_JC -r0 installJc -u")
    } else {
        // без дистрибутива jandcode
        ut.runexe(showout: showout, cmd: "tfu replstr  -i install\\temp2.iss -o install\\temp1.iss -s0 _CFG_INSTALL_JC -r0 noInstallJc -u")
    }

    //
    if (installJre) {
        // с дистрибутивом Java
        ut.runexe(showout: showout, cmd: "tfu replstr  -i install\\temp1.iss -o install\\temp0.iss -s0 _CFG_INSTALL_JRE -r0 installJre -u")
    } else {
        // без дистрибутива Java
        ut.runexe(showout: showout, cmd: "tfu replstr  -i install\\temp1.iss -o install\\temp0.iss -s0 _CFG_INSTALL_JRE -r0 noInstallJre -u")
    }

    // соберем дистрибутив
    ut.runexe(showout: showout, cmd: "cmd /C iscc install\\temp0.iss")

    //
    ut.runexe(showout: showout, cmd: "cmd /C del install\\temp0.iss")
    ut.runexe(showout: showout, cmd: "cmd /C del install\\temp1.iss")
    ut.runexe(showout: showout, cmd: "cmd /C del install\\temp2.iss")
    ut.runexe(showout: showout, cmd: "cmd /C del install\\temp3.iss")
    ut.runexe(showout: showout, cmd: "cmd /C del install\\temp4.iss")
    ut.runexe(showout: showout, cmd: "cmd /C del install\\temp5.iss")
    ut.runexe(showout: showout, cmd: "cmd /C del install\\temp6.iss")
    ut.runexe(showout: showout, cmd: "cmd /C del install\\temp7.iss")

    //
    move_to_install();

    //
    println("");
}

gen = {->
    ut.runexe(showout: showout, cmd: "cmd /C del db_ib\\gen\\gen*.*")
    ut.runexe(showout: showout, cmd: "dps rtgen -d def;source -a -g gen.taskasis")
    ut.runexe(showout: showout, cmd: "dps rtgen -d def;src* -o -oo")
    ut.runexe(showout: showout, cmd: "cmd /C copy db_ib\\esql.bat db_ib\\gen\\esql.bat")
    //ut.runexe(showout: showout, cmd: "cmd /C Z:\\Utils\\python\\python py\\win1251_to_utf8.py gen\\tables.1251.rt gen\\tables.rt")
}

prepare_dir = {->
    ut.runexe(showout: showout, cmd: "dps ver -p")
    ut.runexe(showout: showout, cmd: "cmd /C if not exist test mkdir test")
    ut.runexe(showout: showout, cmd: "cmd /C if not exist notuse mkdir notuse")
    ut.runexe(showout: showout, cmd: "cmd /C if not exist gen mkdir gen")
    ut.runexe(showout: showout, cmd: "cmd /C if not exist RepOut mkdir RepOut")
    ut.runexe(showout: showout, cmd: "cmd /C if not exist gen mkdir gen")
    ut.runexe(showout: showout, cmd: "cmd /C if not exist def\\gen mkdir def\\gen")
    ut.runexe(showout: showout, cmd: "cmd /C if not exist db_ib\\gen mkdir db_ib\\gen")
    ut.runexe(showout: showout, cmd: "cmd /C if not exist db_oracle\\gen mkdir db_oracle\\gen")
    ut.runexe(showout: showout, cmd: "cmd /C if not exist test mkdir test")
    ut.runexe(showout: showout, cmd: "cmd /C if not exist wiki\\data\\attic mkdir wiki\\data\\attic")
    ut.runexe(showout: showout, cmd: "cmd /C if not exist wiki\\data\\meta mkdir wiki\\data\\meta")
    ut.runexe(showout: showout, cmd: "cmd /C if not exist wiki\\data\\locks mkdir wiki\\data\\locks")
    ut.runexe(showout: showout, cmd: "cmd /C if not exist wiki\\data\\index mkdir wiki\\data\\index")
    ut.runexe(showout: showout, cmd: "cmd /C if not exist wiki\\data\\tmp mkdir wiki\\data\\tmp")
    ut.runexe(showout: showout, cmd: "cmd /C if not exist wiki\\data\\cache mkdir wiki\\data\\cache")
    // 
    ut.runexe(showout: showout, cmd: "cmd /C if not exist test\\testtest.pas copy tml\\tml_testtest.pas test\\testtest.pas")
    ut.runexe(showout: showout, cmd: "cmd /C if not exist test\\testtest.dfm copy tml\\tml_testtest.dfm test\\testtest.dfm")
}

//res: res_img res_def res_db res_logo

res_img = {->
    ut.runexe(showout: showout, cmd: "dps imgres -i Images\\16x16 -o 16x16.rc -p img16_")
    ut.runexe(showout: showout, cmd: "dps imgres -i Images\\32x32 -o 32x32.rc -p img32_")
    ut.runexe(showout: showout, cmd: "brcc32 16x16.rc")
    ut.runexe(showout: showout, cmd: "brcc32 32x32.rc")
}

res_def = {->
    ut.runexe(showout: showout, cmd: "dps rtbin -d def;src -f1 rtres.f1 -f2 rtres.f2")
    ut.runexe(showout: showout, cmd: "cmd /C echo KSRTDEF_RTLOAD   RTBIN  rtres.f1 > rtres.rc")
    ut.runexe(showout: showout, cmd: "cmd /C echo KSRTDEF_RT       RTBIN  rtres.f2 >> rtres.rc")
    ut.runexe(showout: showout, cmd: "brcc32 rtres.rc")
}

res_logo = {->
    ut.runexe(showout: showout, cmd: "cmd /C echo LOGOBMP   BITMAP  Images\\PawnshopApp_splash.bmp > AppLogo.rc")
    ut.runexe(showout: showout, cmd: "brcc32 AppLogo.rc")
    ut.runexe(showout: showout, cmd: "cmd /C echo LOGOBMP   BITMAP  Images\\CommissionApp_splash.bmp > AppLogo_commission.rc")
    ut.runexe(showout: showout, cmd: "brcc32 AppLogo_commission.rc")
    ut.runexe(showout: showout, cmd: "cmd /C echo LOGOBMP   BITMAP  Images\\PawnshopApp_splash_promo.bmp > AppLogo_promo.rc")
    ut.runexe(showout: showout, cmd: "brcc32 AppLogo_promo.rc")
}

res_db = {->
    ut.runexe(showout: showout, cmd: "tfu replstr -i DoDB_CurrentVersion.bat -o temp_DoDB_CurrentVersion.bat -s0 _CFG_CURRENT_VERSION -r0 " + dbCurrentVersion + " -u")
    ut.runexe(showout: showout, cmd: "cmd /C temp_DoDB_CurrentVersion.bat")
    ut.runexe(showout: showout, cmd: "cmd /C del temp_DoDB_CurrentVersion.bat")
    // 
    // 
    //for (int i=21; i<100; i++) {
    //  String V0=i;
    //  String V1=i+1;
    //  ut.runexe(showout: showout, cmd: "cmd /C echo DBCHANGE_" + V0 + "_" + V1 + " SQL  db_ib\\versions\\old\\change_" + V0 + "_" + V1 + ".sql >> sqlres.rc")
    //}
    for (int i=100; i<Integer.valueOf(dbCurrentVersion); i++) {
      String V0=i;
      String V1=i+1;
      ut.runexe(showout: showout, cmd: "cmd /C echo DBCHANGE_" + V0 + "_" + V1 + " SQL  db_ib\\versions\\change_" + V0 + "_" + V1 + ".sql >> sqlres.rc")
    }
    // 
    // 
    //ut.runexe(showout: showout, cmd: "cmd /C echo referencesCreate_21 SQL  db_ib\\versions\\old\\referencesCreate_21.sql >> sqlres.rc")
    //ut.runexe(showout: showout, cmd: "cmd /C echo referencesDrop_21   SQL  db_ib\\versions\\old\\referencesDrop_21.sql   >> sqlres.rc")
    // 
    ut.runexe(showout: showout, cmd: "brcc32 sqlres.rc")
}


do_verdb = {->
    ut.runexe(showout: showout, dir: "db_ib", cmd: "cmd /C MakeFullScript.bat")
    ut.runexe(showout: showout, cmd: "cmd /C echo @echo off > temp_fc.bat")
    ut.runexe(showout: showout, cmd: "cmd /C echo fc db_ib\\_sqlfull_ db_ib\\versions\\version__CFG_CURRENT_VERSION.sql /n >> temp_fc.bat")
    ut.runexe(showout: showout, cmd: "tfu replstr -i temp_fc.bat -o temp_fc1.bat -s0 _CFG_CURRENT_VERSION -r0 " + dbCurrentVersion + " -u")
    ut.runexe(showout: showout, cmd: "cmd /C del temp_fc.bat")
    ut.runexe(showout: showout, cmd: "cmd /C temp_fc1.bat")
    ut.runexe(showout: showout, cmd: "cmd /C del temp_fc1.bat")
}


do_doc = {->
    whatsnew();
    htmldoc();
}

whatsnew = {->
    // whatsnew для дистрибутива программы
    //ut.runexe(showout: showout, cmd: "dps gen -t whatsNew\\whatsnew.html.tml -r whatsNew\\whatsnew.rt -g whatsNew\\whatsnew.html")
    ut.runexe(showout: showout, cmd: "dps gen -t whatsNew\\whatsnew.local.html.tml -r whatsNew\\whatsnew.rt -g whatsNew\\whatsnew.html")
    
    // whatsnew для сайта
    ut.runexe(showout: showout, cmd: "dps gen -t whatsNew\\whatsnew.wiki.txt.tml -r whatsNew\\whatsnew.rt -g whatsNew\\whatsnew.wiki.1251.txt")
    //ut.runexe(showout: showout, cmd: "cmd /C Z:\\Utils\\python\\python py\\win1251_to_utf8.py whatsNew\\whatsnew.wiki.1251.txt wiki\\data\\pages\\whatsnew.txt")
    ut.runexe(showout: showout, cmd: "cmd /C del whatsNew\\whatsnew.wiki.1251.txt")
    //
    ut.runexe(showout: showout, cmd: "cmd /C rmdir /S /Q wiki\\lib\\tpl\\default_sdv\\whatsnew_files", err: false)
    ut.runexe(showout: showout, cmd: "cmd /C mkdir wiki\\lib\\tpl\\default_sdv\\whatsnew_files")
    ut.runexe(showout: showout, cmd: "cmd /C copy whatsNew\\whatsnew_files wiki\\lib\\tpl\\default_sdv\\whatsnew_files")

}


htmldoc = {->
    //ut.runexe(showout: showout, dir: "htmlDoc\\offline-doku-0.1.1", cmd: "cmd /C php make.php --verbose Z:\\PawnShop\\wiki Z:\\PawnShop\\htmlDoc\\out")
}


out_separator = { String text, String line ->
    println(UtString.padCenter("", 65, line))
    println(UtString.padCenter(" " + text + " ", 65, line))
    println(UtString.padCenter("", 65, line))
}

